<?phprequire_once("Shaded/Common/NestedSet.php");require_once('Shaded/Core/User.php');$GLOBALS['MessageNestedSet'] = new NestedSet(array(	"table" => 'forum_messages',	"root" => 'threadId',	"left" => 'lft',	"right" => 'rgt',	"unique" => 'id',	"parent" => 'parentId'));class ForumMessage extends EvanceTable {	public static function define() {		self::defaultValue("createdOn", now());		self::defaultValue("modifiedOn", now());	}		public static function preValidate($obj) {		$obj->title = truncate($obj->message, 100);	}		public static function attachTo($message, $attachTo, $attachId) {		$message->attachedTo = $attachTo;		$message->attachId = $attachId;				return $GLOBALS['MessageNestedSet']->insertRoot($message);	}		public static function replyTo($message, $parent) {		$message->attachedTo = $parent->attachedTo;		$message->attachId = $parent->attachId;		$message->threadId = $parent->threadId;				if (!$GLOBALS['MessageNestedSet']->insertLastChild($message, $parent)) {			return false;		}				self::updateThread($message->threadId, $message->lft, $message->rgt);		return true;	}		public static function threadsFor($attachedTo, $attachId) {		return Query(<<<SQLselect m.*, u.name, u.avatarfrom forum_messages mjoin users u on u.userId = m.userIdwhere m.parentId = 0order by modifiedOn desclimit 2SQL		, array($attachedTo, $attachId));	}		public static function rootThreadOf($id) {		return Query(<<<SQLselect t.*, u.name, u.avatarfrom forum_messages mjoin forum_messages t on t.id = m.threadIdjoin users u on u.userId = t.userIdwhere m.id = ?limit 1SQL		, $id);	}		public static function messagesForThreads($threadIds) {		return Query(<<<SQLselect m.*, u.name, u.avatarfrom forum_messages mjoin users u on u.userId = m.userIdwhere m.threadId in :threadsorder by createdOn ascSQL		, array("threads"=>$threadIds));	}		public static function bbCodeParsed($message) {		$parser = new BBCodeParser;		$message = $parser->BBCreateParagraphs($message);		$message = $parser->BBParse($message);		return stripslashes($message);		}		private static function updateThread($threadId, $left, $right) {		EvanceDb::query(<<<SQLupdate forum_messages f1join (	select m1.id, count(m1.id) num	from forum_messages m1	join forum_messages m2 on m2.lft > m1.lft and m2.rgt < m1.rgt	where m1.threadId = ? and m2.threadId = ? and m1.lft < ? and m1.rgt > ?	group by m1.id) s on s.id = f1.idset replyCount = s.num, modifiedOn = now()SQL		, array($threadId, $threadId, $left, $right));	}}EvanceTable::registerTable("ForumMessage", "forum_messages");