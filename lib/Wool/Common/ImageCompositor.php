<?phpclass ImageCompositor {	private $tempDir = '';	private $outDir = '';	private $errors = array();	private $params =array();		public function __construct($file, $params=array()) {		$this->params = $params;		$script = Spyc::YAMLLoad($file);		$success = true;				foreach ($script as $name=>$def) {			if (!$this->createImage($name, $def)) {				$success = false;			}		}				if ($success) {			// Move all images in one go.		}	}		private function createImage($name, $def) {		if (!count($def["layers"])) {			$this->addError("Definitions should contain at least one layer.", $name);			return false;		}				$base = new Imagick();				foreach ($def["layers"] as $layer) {			if (!$this->createLayer($base, $layer)) {				return false;			}		}				header("Content-Type: image/png");		echo $base;		return true;		$savePath = publicPath("/uploads/images/generated/") . date('Y/m/');		mkdir_recursive($savePath);		$savePath .= $name . ".png";		$base->writeImage($savePath);		return true;	}		private function createLayer($base, $def) {		$path = publicPath("/image-create/");				$layer = new Imagick($path . $def["image"]);				// Create the base image if we need to.		if ($base->getImageIndex() == -1) {			$base->newImage($layer->getImageWidth(), $layer->getImageHeight(), "none");			$base->setImageFormat($layer->getImageFormat());		}				// Color the current layer.		$color = $this->getColor($def);				if ($color) {			$colorLayer = new Imagick();			$colorLayer->newImage($base->getImageWidth(), $base->getImageHeight(), $color);			$layer->compositeImage($colorLayer, Imagick::COMPOSITE_MULTIPLY, 0, 0);		}				// Composite onto base image.		list($x, $y) = $this->getOffset($def);		$func = $this->getBlendFunc($def);		$base->compositeImage($layer, $func, $x, $y);				return true;	}		private function getColor($def) {		$def = isset($def["color"]) ? $def["color"] : null;				if (!$def) {			return null;		}				$def = explode(":", $def);				if (count($def) == 2) {			if (isset($this->params["variables"][$def[0]])) {				$color = $this->params["variables"][$def[0]];			} else {				$color = $def[1];			}		}		else if (count($def) == 1) {			$color = $def[0];		}		else {			return null;		}				$regex = "/#[A-Fa-f0-9]{6}/";		if (preg_match($regex, $color)) {			return $color;		}				if (isset($def[1]) && preg_match($regex, $def[1])) {			return $def[1];		}				return null;	}		private function getBlendFunc($def) {		$def = isset($def["func"]) ? $def["func"] : null;		$funcs = array(			"blend" => Imagick::COMPOSITE_OVER,			"mul" => Imagick::COMPOSITE_MULTIPLY		);				return isset($funcs[$def]) ? $funcs[$def] : $funcs["blend"];	}		private function getOffset($def) {		$def = isset($def["offset"]) ? $def["offset"] : null;				if ($def && count($def) == 2 && is_numeric($def[0]) && is_numeric($def[1])) {			return $def;		}				return array(0,0);	}		private function addError($msg, $where) {		$this->errors[] = "Error in '{$where}': {$msg}";	}}